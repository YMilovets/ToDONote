{"version":3,"sources":["contexts/context.jsx","components/formAddNotes.jsx","actions/setNote.js","actions/setNewID.js","components/listToDoNotes.jsx","actions/checkToDoNote.js","components/formUpdateNotes.jsx","actions/updateNote.js","components/listToEditNotes.jsx","actions/deleteNote.js","components/header.jsx","App.js","reportWebVitals.js","reducers/setNote.jsx","reducers/index.jsx","index.js"],"names":["Context","createContext","FormAddNotes","props","useState","alert","setAlert","useContext","dispatch","isEditor","setIsEditor","id","idPos","edited","alertMsg","textNote","useRef","className","onChange","ref","placeholder","onClick","e","preventDefault","current","value","result","trim","length","checked","type","payload","setNote","ListToDoNotes","list","map","elem","i","target","classList","contains","checkToDoNote","onChecked","defaultChecked","FormUpdateNotes","setIsUpdate","isUpdate","itemNote","text","defaultValue","item","updateNote","ListToEditNotes","setEditMode","setItemNote","Provider","disabled","deleteNote","idParam","find","Header","editMode","stateEditBtn","App","useDispatch","useSelector","state","addNoteReducer","listNotes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","reducer","combineReducers","arr","action","filter","enhancer","window","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.815baae1.chunk.js","sourcesContent":["import {createContext} from \"react\";\r\nconst Context = createContext();\r\nexport default Context;","import React, {useRef, useState, useContext} from 'react'\r\nimport setNote from \"../actions/setNote\"\r\nimport setNewID from \"../actions/setNewID\"\r\nimport Context from \"../contexts/context\"\r\n\r\nexport default function FormAddNotes(props) {\r\n    const [alert, setAlert] = useState(false); //состояние отображения сообщения об ошибке\r\n    //idPos - приращение уникального ключа id\r\n    const {dispatch, isEditor, setIsEditor, idPos: id} = useContext(Context);\r\n    const edited = isEditor ? \" form-notes--active\" : \"\"; //Установка класса отображения html-элемента текстового редактора\r\n    const alertMsg = alert ? \" form-notes__text--alert\" : \"\"; //Установка класса отображения html-элемента сообщения об ошибке\r\n    const textNote = useRef(); //Ссылка на текстовое поле задачи\r\n    //Обработчик добавления новой задачи\r\n    const onAddNote = (e) => {\r\n        const result = textNote.current.value.trim();\r\n        const checked = false; //Устанавливаем атрибут задачи на \"Не выполнено\"\r\n        e.preventDefault();\r\n        //Проверка на наличие текстовом поле введенных данных\r\n        if (result.length > 0) {\r\n            setAlert(false); //Очистить отображение сообщения об ошибке\r\n            dispatch(setNote(result, id, checked)); //Отправить действие записи новой задачи\r\n            dispatch(setNewID()); //Увеличить приращение ключа id на 1\r\n            setIsEditor(false); //Убрать модульное окно текстового редактора\r\n            textNote.current.value = \"\"; //Очистить текстовое поле\r\n        }\r\n        else setAlert(true); //Иначе вывести сообщение об ошибке\r\n    }\r\n    //Обработчик закрытия формы без сохранения данных\r\n    const onCloseForm = (e) => {\r\n        e.preventDefault();\r\n        setIsEditor(false); //Убрать модульное окно текстового редактора\r\n        setAlert(false); //Очистить отображение сообщения об ошибке\r\n        textNote.current.value = \"\"; //Очистить текстовое поле\r\n    }\r\n    const onChangeNote = () => {\r\n        setAlert(false);\r\n    }\r\n    return (\r\n        <div className={`form-notes ${edited}`}>\r\n            <form className=\"form-notes-wrap\">\r\n                {alert ? <p className=\"msg-alert\">Заполните поле для ввода новой задачи</p> : \"\"}\r\n                <textarea onChange={onChangeNote} \r\n                            ref={textNote} \r\n                            className={`form-notes__text ${alertMsg}`} \r\n                            placeholder=\"Введите текст задачи\"></textarea>\r\n                <div className=\"form-notes-manage\">\r\n                    <button onClick={onCloseForm} \r\n                            className=\"form-notes__btn form-notes__btn--close\">Закрыть</button>\r\n                    <button onClick={onAddNote} \r\n                            className=\"form-notes__btn form-notes__btn--add\" type=\"submit\">Добавить</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}","export default function setNote(result, id, checked) {\r\n    return {\r\n        type: \"SET_NOTE\", payload: {result, id, checked}\r\n    }\r\n}","export default function setNewID() {\r\n    return {\r\n        type: \"SET_NEW_ID\"\r\n    }\r\n}","import React, {useContext} from 'react'\r\nimport checkToDoNote from \"../actions/checkToDoNote\"\r\nimport Context from \"../contexts/context\"\r\n//Компонент отображения списка задач с возможностью делать пометку об выполнении\r\nexport default function ListToDoNotes(props) {\r\n    const {dispatch, list} = useContext(Context);\r\n    const onChecked = (e, elem) => {\r\n        if (e.target.classList.contains(\"list-to-do__check\")) {\r\n            const id = elem.id;\r\n            const checked = !elem.checked;\r\n            dispatch(checkToDoNote(id, checked)); //Отправить действие изменения состояния об выполнении задачи\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <ul className=\"list-to-do\">\r\n            {list.map(\r\n                (elem, i) => \r\n                (<li onClick={(e) => {onChecked(e, elem)}} \r\n                    className=\"list-to-do__elem\" key={i}>\r\n                    <label className=\"list-to-do__label\">\r\n                        <input className=\"list-to-do__check\" \r\n                            type=\"checkbox\" \r\n                            defaultChecked={elem.checked} />\r\n                        <div className=\"list-to-do__text-wrap\">\r\n                            <div className=\"list-to-do__checkbox\"></div>\r\n                            <span className=\"list-to-do__text\">{elem.result}</span>\r\n                        </div>\r\n                    </label>\r\n                </li>)\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n","export default function checkToDoNote(id, checked) {\r\n    return {type: \"CHECK_TODO_NOTE\", payload: { id, checked }}\r\n}\r\n\r\n","import React, {useRef, useState, useContext} from 'react';\r\nimport updateNote from \"../actions/updateNote\";\r\nimport Context from \"../contexts/context\"\r\n\r\nexport default function FormUpdateNotes(props) {\r\n    const [alert, setAlert] = useState(false);\r\n\r\n    const {dispatch, setIsUpdate, isUpdate, itemNote} = useContext(Context);\r\n    const {id, result: text, checked} = itemNote; //Получения объекта обновляемой задачи\r\n    const edited = isUpdate ? \" form-notes--active\" : \"\"; //Установка класса отображения html-элемента текстового редактора\r\n    const alertMsg = alert ? \" form-notes__text--alert\" : \"\"; //Установка класса отображения html-элемента сообщения об ошибке\r\n    const textNote = useRef(); //Ссылка на текстовое поле задачи\r\n    if (textNote.current) \r\n        textNote.current.value = text; //Записать в текстовое поле предыдущее значение задачи\r\n    //Обработчик обновления данных задачи\r\n    const onUpdateNote = (e) => {\r\n        e.preventDefault();\r\n        let result = textNote.current.value.trim();\r\n        e.preventDefault();\r\n        //Проверка на наличие текстовом поле введенных данных\r\n        if (result.length > 0) {\r\n            setAlert(false); //Очистить отображение сообщения об ошибке\r\n            dispatch(updateNote(result, id, checked)); //Отправить действие обновление записи задачи\r\n            setIsUpdate(false); //Убрать модульное окно текстового редактора\r\n        }\r\n        else setAlert(true);  //Иначе вывести сообщение об ошибке\r\n    }\r\n    //Обработчик закрытия формы без сохранения данных\r\n    const onCloseForm = (e) => {\r\n        e.preventDefault();\r\n        setAlert(false); //Очистить отображение сообщения об ошибке\r\n        setIsUpdate(false); //Убрать модульное окно текстового редактора\r\n    }\r\n    const onChangeNote = () => {\r\n        setAlert(false);\r\n    }\r\n    return (\r\n        <div className={`form-notes ${edited}`}>\r\n            <form className=\"form-notes-wrap\">\r\n                {alert ? <p className=\"msg-alert\">Заполните поле для обновления текста задачи</p> : \"\"}\r\n                <textarea onChange={onChangeNote} \r\n                            type=\"text\" ref={textNote} \r\n                            className={`form-notes__text ${alertMsg}`}\r\n                            defaultValue={props.item}>\r\n                </textarea>\r\n                <div className=\"form-notes-manage\">\r\n                    <button onClick={onCloseForm} \r\n                            className=\"form-notes__btn form-notes__btn--close\">Закрыть</button>\r\n                    <button onClick={onUpdateNote} \r\n                            className=\"form-notes__btn form-notes__btn--add\" \r\n                            type=\"submit\">Сохранить</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","export default function updateNote(result, id, checked) {\r\n    return {\r\n        type: \"UPDATE_NOTE\", payload: {result, id, checked}\r\n    }\r\n}","import FormUpdateNotes from \"../components/formUpdateNotes\"\r\nimport deleteNote from \"../actions/deleteNote\"\r\nimport Context from \"../contexts/context\";\r\nimport {useContext, useState} from \"react\";\r\n\r\nexport default function ListToEditNotes(props) {\r\n    const {dispatch, list, setEditMode} = useContext(Context);\r\n    //Состояния. которые будут определены в компоненте и отправлены в форму обновления\r\n    const [isUpdate, setIsUpdate] = useState(false);\r\n    const [itemNote, setItemNote] = useState({});\r\n    const onRemoveNote = (id) => {\r\n        dispatch(deleteNote(id)); //Отправить действие удаление задачи по id\r\n        if (!(list.length - 1)) setEditMode(false); //При удалении всех задач отключить режим редактирования\r\n    }\r\n    const onEditNote = (idParam) => {\r\n        setIsUpdate(true); //Активировать модульное окно текстового редактора\r\n        setItemNote( list.find(elem => elem.id === idParam) ); //Найти объект задачи по id и записать в itemNote\r\n    }\r\n    return (\r\n        <Context.Provider value={{dispatch, setIsUpdate, isUpdate, itemNote}}>\r\n            <ul className=\"list-to-do\">\r\n                {list.map(\r\n                    (elem, i) => \r\n                    (<li className=\"list-to-do__elem\" key={i}>\r\n                        <label className=\"list-to-do__label\">\r\n                            <input className=\"list-to-do__check\" \r\n                                type=\"checkbox\" \r\n                                defaultChecked={elem.checked} \r\n                                disabled />\r\n                            <div className=\"list-to-do__text-wrap\">\r\n                                <div onClick={() => onRemoveNote(elem.id)} \r\n                                    className=\"list-to-do__remove\"></div>\r\n                                <span onClick={() => onEditNote(elem.id)} \r\n                                    className=\"list-to-do__text\">{elem.result}</span>\r\n                            </div>\r\n                        </label>\r\n                    </li>)\r\n                )}\r\n            </ul>\r\n            <FormUpdateNotes />\r\n        </Context.Provider>  \r\n    )\r\n}","export default function deleteNote(id) {\r\n    return {\r\n        type: \"DELETE_NOTE\",\r\n        payload: id\r\n    }\r\n}","import React, {useContext} from 'react'\r\nimport Context from \"../contexts/context\";\r\n\r\nexport default function Header(props) {\r\n    const {list, editMode, setEditMode} = useContext(Context);\r\n    const onEditMode = () => {\r\n        editMode ? setEditMode(false) : setEditMode(true);\r\n    } //Определить отображение текста кнопки при активании и деактивации режима редактирования\r\n    return (\r\n        <div className=\"header\">\r\n            <h1 className=\"header__title\">Сегодня</h1>\r\n            {list.length > 0 && \r\n                <button onClick={onEditMode} \r\n                    className=\"edit-notes\">{props.stateEditBtn}\r\n                </button>}\r\n        </div>\r\n    )\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useState} from \"react\";\r\nimport \"./App.css\";\r\nimport FormAddNodes from \"./components/formAddNotes\";\r\nimport ListToDoNotes from \"./components/listToDoNotes\"\r\nimport ListToEditNotes from \"./components/listToEditNotes\"\r\nimport Header from \"./components/header\"\r\nimport Context from \"./contexts/context\"\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch(); \r\n  //Выборка свойств из состояния хранилища state\r\n  //listNotes - массив хранения объектов задач todo со свойствами {id, result, checked}\r\n  const {listNotes: list, id: idPos} = useSelector(state => state.addNoteReducer);\r\n  const [isEditor, setIsEditor] = useState(false);  //состояние запуска текстового редактора\r\n  const [editMode, setEditMode] = useState(false);  //режим состояния редактирования\r\n\r\n  //Обработчик события запуска формы текстового редактора\r\n  const onAddForm = () => {\r\n    setIsEditor(true);\r\n  }\r\n  //Состояние кнопки активации режима редактирования\r\n  const stateEditBtn = editMode ? \"Отменить\" : \"Править\";\r\n  return (\r\n    <Context.Provider value={{list, dispatch, isEditor, setIsEditor, idPos, setEditMode, editMode}}>\r\n      <div className=\"app\">\r\n        <Header {...{stateEditBtn}} />\r\n        {list.length ? \r\n          (editMode ? <ListToEditNotes /> : \r\n            <ListToDoNotes />) : \r\n          <p className=\"msg-alert\">Список задач пуст</p>}\r\n        {!editMode && <button onClick={onAddForm} className=\"add-note\"></button>}\r\n        \r\n        <FormAddNodes />\r\n      </div>\r\n    </Context.Provider>\r\n  );\r\n}\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const defaultState = {\r\n    listNotes: [],\r\n    id: 0\r\n}\r\nexport default function addNoteReducer (state = defaultState, action) {\r\n    let arr;\r\n    switch (action.type) {\r\n        case \"SET_NEW_ID\":\r\n            return {...state, id: state.id + 1}\r\n        case \"SET_NOTE\":\r\n            return {...state, listNotes: [...state.listNotes, {...action.payload}]};\r\n        case \"DELETE_NOTE\":\r\n            arr = state.listNotes.filter(elem => elem.id !== action.payload)\r\n            return {...state, listNotes: arr};\r\n        case \"CHECK_TODO_NOTE\":\r\n            arr = state.listNotes.map(elem => {\r\n                if (elem.id === action.payload.id)\r\n                    elem.checked = action.payload.checked;\r\n                return elem;\r\n            })\r\n            return {...state, listNotes: arr};\r\n        case \"UPDATE_NOTE\":\r\n            arr = state.listNotes.map(elem => {\r\n                if (elem.id === action.payload.id)\r\n                    elem.result = action.payload.result;\r\n                return elem;\r\n            })\r\n            return {...state, listNotes: arr};\r\n        default: return state\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport addNoteReducer from \"./setNote\"\r\nconst reducer = combineReducers({addNoteReducer});\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\"\r\nimport {createStore} from \"redux\"\r\nimport reducer from \"./reducers\"\r\n\r\n//Запрашиваем данные с локального хранилища\r\nconst enhancer = window.localStorage.getItem(\"storage\") ? JSON.parse(window.localStorage.getItem(\"storage\")) : {};\r\nconst store = createStore(reducer, enhancer);\r\n\r\nstore.subscribe(() => {\r\n  window.localStorage.setItem(\"storage\", JSON.stringify(store.getState()))\r\n})\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}