{"version":3,"sources":["components/formAddNotes.jsx","actions/setNote.js","actions/setNewID.js","components/listToDoNotes.jsx","actions/checkToDoNote.js","components/formUpdateNotes.jsx","actions/updateNote.js","components/listToEditNotes.jsx","actions/deleteNote.js","components/header.jsx","App.js","reportWebVitals.js","reducers/setNote.jsx","reducers/index.jsx","index.js"],"names":["FormAddNotes","props","useState","alert","setAlert","edited","isEdit","alertMsg","textNote","useRef","className","onChange","ref","placeholder","onClick","e","preventDefault","setIsEdit","current","value","result","trim","id","idPos","length","dispatch","checked","type","payload","setNote","ListToDoNotes","list","map","elem","i","target","classList","contains","checkToDoNote","onChecked","defaultChecked","FormUpdateNotes","isUpdate","item","defaultValue","setIsUpdate","itemNote","updateNote","ListToEditNotes","disabled","deleteNote","setEditMode","idParam","setID","setItemNote","find","Header","onEditMode","stateEditBtn","App","useDispatch","useSelector","state","addNoteReducer","listNotes","editMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","reducer","combineReducers","arr","action","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3723b864.chunk.js","sourcesContent":["import React, {useRef, useState} from 'react'\r\nimport setNote from \"../actions/setNote\"\r\nimport setNewID from \"../actions/setNewID\"\r\n\r\nexport default function FormAddNotes(props) {\r\n    const [alert, setAlert] = useState(false)\r\n    const edited = props.isEdit ? \" form-notes--active\" : \"\";\r\n    const alertMsg = alert ? \" form-notes__text--alert\" : \"\";\r\n    const textNote = useRef()\r\n    const onAddNote = (e) => {\r\n        const result = textNote.current.value.trim();\r\n        const id = props.idPos;\r\n        const checked = false;\r\n        e.preventDefault();\r\n\r\n        if (result.length > 0) {\r\n            setAlert(false);\r\n            props.dispatch(setNote(result, id, checked));\r\n            props.dispatch(setNewID());\r\n            props.setIsEdit(false);\r\n            textNote.current.value = \"\";\r\n        }\r\n        else setAlert(true);\r\n    }\r\n    const onCloseForm = (e) => {\r\n        e.preventDefault();\r\n        props.setIsEdit(false);\r\n        setAlert(false);\r\n        textNote.current.value = \"\";\r\n    }\r\n    const onChangeNote = () => {\r\n        setAlert(false);\r\n    }\r\n    return (\r\n        <div className={`form-notes ${edited}`}>\r\n            <form className=\"form-notes-wrap\">\r\n                {alert ? <p className=\"msg-alert\">Заполните поле для ввода новой задачи</p> : \"\"}\r\n                <textarea onChange={onChangeNote} \r\n                            ref={textNote} \r\n                            className={`form-notes__text ${alertMsg}`} \r\n                            placeholder=\"Введите текст задачи\"></textarea>\r\n                <div className=\"form-notes-manage\">\r\n                    <button onClick={onCloseForm} \r\n                            className=\"form-notes__btn form-notes__btn--close\">Закрыть</button>\r\n                    <button onClick={onAddNote} \r\n                            className=\"form-notes__btn form-notes__btn--add\" type=\"submit\">Добавить</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}","export default function setNote(result, id, checked) {\r\n    return {\r\n        type: \"SET_NOTE\", payload: {result, id, checked}\r\n    }\r\n}","export default function setNewID() {\r\n    return {\r\n        type: \"SET_NEW_ID\"\r\n    }\r\n}","import React, {useRef} from 'react'\r\nimport checkToDoNote from \"../actions/checkToDoNote\"\r\n\r\nexport default function ListToDoNotes(props) {\r\n    const result = useRef();\r\n    const onChecked = (e, elem) => {\r\n        if (e.target.classList.contains(\"list-to-do__check\")) {\r\n            const id = elem.id;\r\n            const checked = !elem.checked;\r\n            props.dispatch(checkToDoNote(id, checked))\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <ul className=\"list-to-do\">\r\n            {props.list.map(\r\n                (elem, i) => \r\n                (<li onClick={(e) => {onChecked(e, elem)}} \r\n                    className=\"list-to-do__elem\" key={i}>\r\n                    <label className=\"list-to-do__label\">\r\n                        <input ref={result} \r\n                            className=\"list-to-do__check\" \r\n                            type=\"checkbox\" \r\n                            defaultChecked={elem.checked} />\r\n                        <div className=\"list-to-do__text-wrap\">\r\n                            <div className=\"list-to-do__checkbox\"></div>\r\n                            <span className=\"list-to-do__text\">{elem.result}</span>\r\n                        </div>\r\n                    </label>\r\n                </li>)\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\n","export default function checkToDoNote(id, checked) {\r\n    return {type: \"CHECK_TODO_NOTE\", payload: { id, checked }}\r\n}\r\n\r\n","import React, {useRef, useState} from 'react'\r\nimport updateNote from \"../actions/updateNote\"\r\n\r\nexport default function FormUpdateNotes(props) {\r\n    const [alert, setAlert] = useState(false);\r\n    const edited = props.isUpdate ? \" form-notes--active\" : \"\";\r\n    const alertMsg = alert ? \" form-notes__text--alert\" : \"\";\r\n    const textNote = useRef();\r\n    if (textNote.current) textNote.current.value = props.item;\r\n    const onUpdateNote = (e) => {\r\n        let result = textNote.current.value.trim();\r\n        const id = props.id;\r\n        const checked = props.itemNote.checked;\r\n        e.preventDefault();\r\n        if (result.length > 0) {\r\n            setAlert(false);\r\n            props.dispatch(updateNote(result, id, checked));\r\n            props.setIsUpdate(false);\r\n        }\r\n        else setAlert(true);\r\n    }\r\n    const onCloseForm = (e) => {\r\n        e.preventDefault();\r\n        setAlert(false);\r\n        props.setIsUpdate(false);\r\n    }\r\n    const onChangeNote = () => {\r\n        setAlert(false);\r\n    }\r\n    return (\r\n        <div className={`form-notes ${edited}`}>\r\n            <form className=\"form-notes-wrap\">\r\n                {alert ? <p className=\"msg-alert\">Заполните поле для обновления текста задачи</p> : \"\"}\r\n                <textarea onChange={onChangeNote} \r\n                            type=\"text\" ref={textNote} \r\n                            className={`form-notes__text ${alertMsg}`}\r\n                            defaultValue={props.item}>\r\n                </textarea>\r\n                <div className=\"form-notes-manage\">\r\n                    <button onClick={onCloseForm} \r\n                            className=\"form-notes__btn form-notes__btn--close\">Закрыть</button>\r\n                    <button onClick={onUpdateNote} \r\n                            className=\"form-notes__btn form-notes__btn--add\" \r\n                            type=\"submit\">Сохранить</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n","export default function updateNote(result, id, checked) {\r\n    return {\r\n        type: \"UPDATE_NOTE\", payload: {result, id, checked}\r\n    }\r\n}","import FormUpdateNotes from \"../components/formUpdateNotes\"\r\nimport deleteNote from \"../actions/deleteNote\"\r\n\r\nexport default function ListToEditNotes(props) {\r\n    const onRemoveNote = (id) => {\r\n        props.dispatch(deleteNote(id))\r\n        if (!(props.list.length - 1)) props.setEditMode(false)\r\n    }\r\n    const onEditNote = (idParam) => {\r\n        props.setIsUpdate(true);\r\n        props.setID(idParam);\r\n        props.setItemNote( props.list.find(elem => elem.id === idParam) );\r\n    }\r\n    return (\r\n        <>\r\n            <ul className=\"list-to-do\">\r\n                {props.list.map(\r\n                    (elem, i) => \r\n                    (<li className=\"list-to-do__elem\" key={i}>\r\n                        <label className=\"list-to-do__label\">\r\n                            <input className=\"list-to-do__check\" \r\n                                type=\"checkbox\" \r\n                                defaultChecked={elem.checked} \r\n                                disabled />\r\n                            <div className=\"list-to-do__text-wrap\">\r\n                                <div onClick={() => onRemoveNote(elem.id)} \r\n                                    className=\"list-to-do__remove\"></div>\r\n                                <span onClick={() => onEditNote(elem.id)} \r\n                                    className=\"list-to-do__text\">{elem.result}</span>\r\n                            </div>\r\n                        </label>\r\n                    </li>)\r\n                )}\r\n            </ul>\r\n            <FormUpdateNotes {...props} item={props.itemNote.result}/>\r\n        </>  \r\n    )\r\n}","export default function deleteNote(id) {\r\n    return {\r\n        type: \"DELETE_NOTE\",\r\n        payload: id\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default function Header(props) {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1 className=\"header__title\">Сегодня</h1>\r\n            {props.list.length > 0 && \r\n                <button onClick={props.onEditMode} \r\n                    className=\"edit-notes\">{props.stateEditBtn}\r\n                </button>}\r\n        </div>\r\n    )\r\n}\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {useState} from \"react\";\r\nimport \"./App.css\";\r\nimport FormAddNodes from \"./components/formAddNotes\";\r\nimport ListToDoNotes from \"./components/listToDoNotes\"\r\nimport ListToEditNotes from \"./components/listToEditNotes\"\r\nimport Header from \"./components/header\"\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const list = useSelector(state => state.addNoteReducer.listNotes);\r\n  const idPos = useSelector(state => state.addNoteReducer.id);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [isUpdate, setIsUpdate] = useState(false);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [id, setID] = useState(0);\r\n  const [itemNote, setItemNote] = useState({});\r\n\r\n  const onAddForm = () => {\r\n    setIsEdit(true);\r\n  }\r\n  const onEditMode = () => {\r\n    editMode ? setEditMode(false) : setEditMode(true);\r\n  }\r\n  const stateEditBtn = editMode ? \"Отменить\" : \"Править\";\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Header {...{list, onEditMode, stateEditBtn}} />\r\n      {list.length ? \r\n        (editMode ? <ListToEditNotes {...{isUpdate, id, list, dispatch, itemNote, setItemNote, setEditMode, setIsUpdate, setID}}/> : \r\n          <ListToDoNotes {...{list, dispatch}} />) : \r\n        <p className=\"msg-alert\">Список задач пуст</p>}\r\n      {!editMode ? <button onClick={onAddForm} className=\"add-note\"></button> : \"\"}\r\n      \r\n      <FormAddNodes {...{isEdit, dispatch, list, setIsEdit, idPos}}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","const defaultState = {\r\n    listNotes: [],\r\n    id: 0\r\n}\r\nexport default function addNoteReducer (state = defaultState, action) {\r\n    let arr;\r\n    switch (action.type) {\r\n        case \"SET_NEW_ID\":\r\n            return {...state, id: state.id + 1}\r\n        case \"SET_NOTE\":\r\n            return {...state, listNotes: [...state.listNotes, {...action.payload}]};\r\n        case \"DELETE_NOTE\":\r\n            arr = state.listNotes.filter(elem => elem.id !== action.payload)\r\n            return {...state, listNotes: arr};\r\n        case \"CHECK_TODO_NOTE\":\r\n            arr = state.listNotes.map(elem => {\r\n                if (elem.id === action.payload.id)\r\n                    elem.checked = action.payload.checked;\r\n                return elem;\r\n            })\r\n            return {...state, listNotes: arr};\r\n        case \"UPDATE_NOTE\":\r\n            arr = state.listNotes.map(elem => {\r\n                if (elem.id === action.payload.id)\r\n                    elem.result = action.payload.result;\r\n                return elem;\r\n            })\r\n            return {...state, listNotes: arr};\r\n        default: return state\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport addNoteReducer from \"./setNote\"\r\nconst reducer = combineReducers({addNoteReducer});\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport {Provider} from \"react-redux\"\r\nimport {createStore} from \"redux\"\r\nimport reducer from \"./reducers\"\r\n\r\nconst store = createStore(reducer);\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}